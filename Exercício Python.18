#üë®üèΩ‚ÄçüíªExerc√≠cios em Python para treinar/recapitular o cap√≠tulo 1 de Grokking Algorithms


#1. Buscando um nome / Busca Linear
def listanomes():
    lista_nomes = ["Jo√£o","Pedro","Lucas", "Caio", "otavio"]
    nome_buscado = "Caio"
    for i, nome in enumerate(lista_nomes):
        if nome == nome_buscado:
            print(i)
listanomes()

#2. Buscar um n√∫mero em uma lista ordenada / Busca Linear
def numeros(lista_numeros, numero_buscado):
    for i, numero in enumerate(lista_numeros):
        if numero == numero_buscado:
            print(f"Esse √© o n√∫mero procurado: {numero_buscado} e esse √© o √≠ndice onde ele est√°:{i}")
    return("N√£o achamos...")

lista_numeros = [0,1,2,3,4,5]
numeros(lista_numeros,3)

#3- Buscar um n√∫mero / Busca Bin√°ria
def buscar_numero(lista_numeros, numero_buscado):
    #Define o in√≠cio e o fim da busca
    inicio = 0
    fim = len(lista_numeros) - 1
    while inicio <= fim:
        meio = (inicio + fim) // 2
        chute = lista_numeros[meio]

        if chute == numero_buscado:
            return meio #N√∫mero encontrado
        
        elif chute < numero_buscado:
            inicio = meio+1

        else:
            fim = meio -1
    return ("N√∫mero n√£o encontrado")


resultado = buscar_numero(lista_numeros=[0,1,2,3,4,5], numero_buscado=4)
print(f"Resultado: {resultado}")


#4- Procurando um nome utilizando busca bin√°ria
def procurando_nome(lista_nome, nome_Procurando):
    inicio_da_procura = 0
    fim_da_procura = len(lista_nome) - 1
    while inicio_da_procura <= fim_da_procura:
        #Definindo o meio:
        meio = (inicio_da_procura + fim_da_procura) // 2
        chute = lista_nome[meio]
        if chute == nome_Procurando:
            return meio
        elif chute < nome_Procurando:
            inicio_da_procura=  meio + 1
        else:
            fim_da_procura = meio - 1
    return("N√£o encontramos o nome")

resultado_final = procurando_nome(lista_nome=["Caio", "Pedro", "Jo√£o", "Marcos", "Lucas"])
print(f"Resultado final: {resultado_final}")
